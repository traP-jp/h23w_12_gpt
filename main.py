from openai import OpenAI
import re
import requests
import json

# Parameters

# 関数の外に書きたかったのでf-stringにしませんでした
PROMPT = """
###見本
    "cooking_name": "レオナルド・ダ・ウィンチ",
    "comment": "この名前から連想されるのは、芸術性とイタリアの伝統的な味わいです。そこで、イタリアンスタイルの豪華な料理を想像しましょう。この料理は、鮮やかな色合いとモダンな味わいが特徴です。見た目にも華やかで、特別な日にぴったりの一品になるでしょう。",
    "ingredient": [
        "ニンニク 2片（みじん切り）",
        "新鮮なバジル 10枚",
        "プロシュート 100g（薄切り）",
        "モッツァレラチーズ 150g（スライス）",
        "ミニトマト 200g（半分に切る）",
        "ペンネパスタ 200g"]
    "seasoning":[
        "オリーブオイル 大さじ2",
        "白ワイン 100ml",
        "塩 適量",
        "黒こしょう 適量",
        "パルメザンチーズ 適量（削り）"
    ],
    "instruction": [
        "パスタを塩を入れたお湯でアルデンテに茹でる。",
        "フライパンにオリーブオイルを熱し、ニンニクを炒める。",
        "プロシュートを加えてさっと炒め、ミニトマトも加えて炒める。",
        "白ワインを注ぎ、少し煮詰める。",
        "茹で上がったパスタをフライパンに加え、全体をよく混ぜる。",
        "モッツァレラチーズとバジルを加え、塩と黒こしょうで味を調える。",
        "皿に盛り付け、パルメザンチーズを上から削って完成。"
    ]
    "detailed_description": [
        "A dish inspired by Leonardo da Vinci, featuring a plate of penne pasta mixed with sautéed prosciutto, mini tomatoes, and fresh basil. Topped with slices of mozzarella cheese and a sprinkle of Parmesan, garnished elegantly on a ceramic plate. The setting is artistic and sophisticated, embodying the essence of Italian cuisine with a modern twist."
        ]

"cooking_name": "{text}",
"comment": "その料理の由来,雰囲気",
"ingredient": [ ],
"seasoning": [ ],
"instruction": [ ]
"detailed_description": ["You must  write this part in English.
1.Identify Detailed Visual Elements: I think of specific visual elements that will make the generated image concrete and original. For example, in the case of a dish, I imagine the ingredients, colors, shapes, and style of presentation in detail.
2.Setting the Scene: The background or context of the image is also important. I create an overall image of the scene, like what kind of plate the dish is on, what the surrounding atmosphere is like, etc.
3.Artistic and Creative Expression: To enhance the uniqueness and artistry of the image, I sometimes incorporate creative elements or distinctive styles.
4.Color Palette: Mentioning specific colors (like deep blues, purples, and shimmering silvers) could help convey the cosmic theme more vividly."]
# 見本を参考にして与えた料理二人前のレシピを書いてjson形式で出力してください
{text}
"""

def query_gpt(client, prompt):
    """
    Send the given prompt to the GPT api to get a completion.

    Parameters
    ----------
    client: ?
        OpenAI client
    prompt: str
        prompt to generate a recipe

    Returns
    -------
    recipe_info: dict
        success request: dict that contains information about the recipe other than the image
        otherwise: 0
    image_prompt: str
        success request: prompt to generate image
        otherwise: 0
    """
    GPT_prompt = PROMPT.format(text=prompt) # プロンプトに入力（料理名）を埋め込み

    try:
        # GPTモデルに問い合わせ
        response = client.chat.completions.create(
            model='gpt-3.5-turbo-1106',  # gpt-4-1106-preview or gpt-3.5-turbo-1106でモデルを選択
            messages=[{"role": "user", "content": GPT_prompt}]
        )
        if not response:
            return 0, 0

        # JSON形式のテキストを抽出，直接dictにできませんでした
        json_part = re.search(r'\{.*\}', response.choices[0].message.content, re.DOTALL)
        extracted_json = json_part.group()
        recipe_info = json.loads(extracted_json)
        if 'cooking_name' in recipe_info:
            recipe_info['name'] = recipe_info.pop('cooking_name')
        # 画像生成用のプロンプトを抽出
        match = re.search(r'"detailed_description": \[([^\]]*)\]', response.choices[0].message.content)
        if match:
            image_prompt = match.group(1).strip().strip('"')
        else:
            return 0, 0

    except Exception:
        return 0, 0
    return recipe_info, image_prompt


def query_dall_e(client, prompt):
    """
    Send the given prompt to dall-e-3 api to get an image.

    Parameters
    ----------
    client: ?
        OpenAI client
    prompt: str
        prompt for generating image generated by query_gpt

    Returns
    -------
    image_url: str
        url to retrieve the image generated by dall-e-3
    """
    try:
        # DALL-Eモデルに問い合わせ
        response = client.images.generate(
            model = 'dall-e-3',
            prompt = f'# Draw a complete dish on one plate. # Draw it realistic. # {prompt}',
            size = '1024x1024',
            n = 1,
            style = 'vivid'
        )

        # 生成された画像のURLを取得
        ig_url = response.data[0].url
        # ToDo: I have to check that it is enough the unexpecteed error.
        return  ig_url
    except:
        return 0, 0


def get_image_from_url(url):
    """
    Downloads an image from the specified URL and converts it to binary data.

    Parameters
    ----------
    url : str
        The URL of the image to download.

    Returns
    -------
    binary_image : bytes
        The binary data of the image.
    """
    try:
        # URLから画像をダウンロード
        response = requests.get(url)
        response.raise_for_status()

        # 画像をバイナリデータとして取得
        binary_image = response.content
        return binary_image
        
    except:
        return 0, 0


def executor(name):
    """
    Generates a recipe and image from a given dish name and returns them in dict.

    Parameters
    ----------
    name: str

    Returns
    -------
    recipe_info: dict
        dict with cooking_name, comment, ingredient, seasoning, instruction, and image as keys
    """
    client = OpenAI()

    # GPTモデルを用いてレシピ情報と画像生成用プロンプトを取得
    recipe_info, image_prompt = query_gpt(client, name)

    # DALL-Eモデルを用いて画像を生成
    image_url = query_dall_e(client, image_prompt)

    # 画像のURLからバイナリデータを取得
    recipe_info['image'] = get_image_from_url(image_url)

    return recipe_info

# recipe = executor("秋葉荊棘")
# print(recipe)
