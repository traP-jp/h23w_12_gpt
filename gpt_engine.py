from openai import OpenAI
import time
import re
import json
import requests

# Parameters
MAX_RETRIES = 3
PROMPT = """
###見本
    "name": "レオナルド・ダ・ウィンチ",
    "comment": "この名前から連想されるのは、芸術性とイタリアの伝統的な味わいです。そこで、イタリアンスタイルの豪華な料理を想像しましょう。この料理は、鮮やかな色合いとモダンな味わいが特徴です。見た目にも華やかで、特別な日にぴったりの一品になるでしょう。",
    "ingredient": [
        "ニンニク 2片（みじん切り）",
        "新鮮なバジル 10枚",
        "プロシュート 100g（薄切り）",
        "モッツァレラチーズ 150g（スライス）",
        "ミニトマト 200g（半分に切る）",
        "ペンネパスタ 200g"]
    "seasoning":[
        "オリーブオイル 大さじ2",
        "白ワイン 100ml",
        "塩 適量",
        "黒こしょう 適量",
        "パルメザンチーズ 適量（削り）"
    ],
    "instruction": [
        "パスタを塩を入れたお湯でアルデンテに茹でる。",
        "フライパンにオリーブオイルを熱し、ニンニクを炒める。",
        "プロシュートを加えてさっと炒め、ミニトマトも加えて炒める。",
        "白ワインを注ぎ、少し煮詰める。",
        "茹で上がったパスタをフライパンに加え、全体をよく混ぜる。",
        "モッツァレラチーズとバジルを加え、塩と黒こしょうで味を調える。",
        "皿に盛り付け、パルメザンチーズを上から削って完成。"
    ]
    "detailed_description": [
        "A dish inspired by Leonardo da Vinci, featuring a plate of penne pasta mixed with sautéed prosciutto, mini tomatoes, and fresh basil. Topped with slices of mozzarella cheese and a sprinkle of Parmesan, garnished elegantly on a ceramic plate. The setting is artistic and sophisticated, embodying the essence of Italian cuisine with a modern twist."
        ]

"name": " ",
"comment": "その料理の由来,雰囲気",
"ingredient": [ ],
"seasoning": [ ],
"instruction": [ ]
"detailed_description": ["Only this part should be written in English.
1.Identify Detailed Visual Elements: I think of specific visual elements that will make the generated image concrete and original. For example, in the case of a dish, I imagine the ingredients, colors, shapes, and style of presentation in detail.
2.Setting the Scene: The background or context of the image is also important. I create an overall image of the scene, like what kind of plate the dish is on, what the surrounding atmosphere is like, etc.
3.Artistic and Creative Expression: To enhance the uniqueness and artistry of the image, I sometimes incorporate creative elements or distinctive styles.
4.Color Palette: Mentioning specific colors (like deep blues, purples, and shimmering silvers) could help convey the cosmic theme more vividly."]
###見本を参考にして与えた料理二人前のレシピを書いてjson形式で出力して
{text}
""".strip()


def query_gpt(client, prompt):
    """
    Send the given prompt to the GPT api to get a completion.

    Parameters
    ----------
    client: ?
        OpenAI client
    prompt: str
        prompt to generate a recipe

    Returns
    -------
    recipe_info: dict
        success request: dict that contains information about the recipe other than the image
        otherwise: 0
    image_prompt: str
        success request: prompt to generate image
        otherwise: 0
    """
    try:
        print('Thinking')
        response = client.chat.completions.create(
            model = 'gpt-3.5-turbo-1106'
            messages = [{"role": "user", "content": prompt}]
        )
        # ToDo: I have to check processes to convert the response to json.

    except:
        return 0, 0
    return recipe_info, image_prompt


def query_dall_e(client, prompt):
    """
    Send the given prompt to dall-e-3 api to get an image.

    Parameters
    ----------
    client: ?
        OpenAI client
    prompt: str
        prompt for generating image generated by query_gpt

    Returns
    -------
    image_url: str
        url to retrieve the image generated by dall-e-3
    """
    try:
        response = client.image.generate(
            mpdel = 'dall-e-3',
            prompt = f'Draw a complete dish on one plate.{prompt}',
            size = '1024x1024',
            n = 1,
            style = 'vivid'
        )
        # ToDo: I have to check that it is enough the unexpecteed error.
        image_url = image_response.data[0].url
    return image_url


def get_image_from_url(url):
    """
    The image generated by Dall-e-3 is downloaded by the specified url and changed to binary data.

    Parameters
    ----------
    url

    Returns
    -------
    binary_image: binary
        binary image retrieved from the given url
    """
    return binary_image


def executor(name):
    """
    Generates a recipe and image from a given dish name and returns them in dict.

    Parameters
    ----------
    name: str

    Returns
    -------
    recipe_info: dict
        dict with cooking_name, comment, ingredient, seasoning, instruction, and image as keys
    """
    client = OpenAI()  # if you find it more convenient to use a global variable, please change it.

    recipe_info, image_prompt = query_gpt(client, name)
    image_url = query_dall_e(client, image_prompt)

    recipe_info['image'] = get_image_from_url(image_url)

    return recipe_info
